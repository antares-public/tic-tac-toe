{"version":3,"sources":["components/App.tsx","utils/winner.ts","components/AppContainer.tsx","index.tsx"],"names":["WinnerWindow","winner","setWinner","setBoard","Modal","ModalInner","onClick","Image","styled","img","Game","div","GameContainer","Square","button","App","board","useState","useEffect","squares","lines","i","length","a","b","c","calculateWinner","checkImg","value","map","index","bind","className","src","alt","AppContainer","player","setPlayer","saved","JSON","parse","localStorage","getItem","setItem","stringify","prev","e","ReactDOM","render","document","getElementById"],"mappings":"4NAWMA,EAID,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,OAAQC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAMzB,OACE,cAACC,EAAD,UACE,eAACC,EAAD,WACE,yCAAYJ,KACZ,wBAAQK,QAAS,kBARrBJ,EAAU,WACVC,EAAS,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,MAOtC,8BAiDFI,EAAQC,IAAOC,IAAV,+DAKLC,EAAOF,IAAOG,IAAV,6HAQJC,EAAgBJ,IAAOG,IAAV,wFAMbE,EAASL,IAAOM,OAAV,mHAONV,EAAQI,IAAOG,IAAV,wKAWLN,EAAaG,IAAOG,IAAV,uWAqBDI,EArGiB,SAAC,GAAkC,IAAhCT,EAA+B,EAA/BA,QAASU,EAAsB,EAAtBA,MAAOb,EAAe,EAAfA,SAAe,EACpCc,mBAAwB,MADY,mBACzDhB,EADyD,KACjDC,EADiD,KAGhEgB,qBAAU,WACRhB,ECjCG,SAAyBiB,GAW9B,IAVA,IAAMC,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAEAC,EAAI,EAAGA,EAAID,EAAME,OAAQD,IAAK,CAAC,IAAD,cACnBD,EAAMC,GADa,GAC9BE,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAErC,GAAIN,EAAQI,IAAMJ,EAAQI,KAAOJ,EAAQK,IAAML,EAAQI,KAAOJ,EAAQM,GACpE,OAAON,EAAQI,GAGnB,OAAO,KDgBKG,CAAgBV,MACzB,CAACA,IAEJ,IAAMW,EAAW,SAACC,GAChB,OAAQA,GACN,IAAK,IACH,MAAO,QACT,IAAK,IACH,MAAO,OACT,QACE,MAAO,OAIb,OACE,eAAChB,EAAD,WACGX,GACC,cAAC,EAAD,CACEA,OAAQA,EACRE,SAAUA,EACVD,UAAWA,IAIf,cAACQ,EAAD,UACGM,EAAMa,KAAI,SAACD,EAAOE,GAAR,OACT,cAACjB,EAAD,CACEP,QAASA,EAAQyB,KAAK,KAAMD,GAE5BE,UAAWL,EAASC,GAHtB,SAKE,cAACrB,EAAD,CAAO0B,IAAG,WAAMN,EAASC,GAAf,QAA6BM,IAAI,MAHtCJ,YEVFK,EAjDgB,WAAO,IAAD,EACTlB,mBAAmB,CAC3C,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,KAViC,mBAC5BD,EAD4B,KACrBb,EADqB,OAYPc,oBAAyB,GAZlB,mBAY5BmB,EAZ4B,KAYpBC,EAZoB,KAcnCnB,qBAAU,WACR,IAAMoB,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,MACpDN,IAAWK,aAAaC,QAAQ,UAEtCvC,EAASmC,GACTD,EAAUD,KACT,IAEHlB,qBAAU,WACRuB,aAAaE,QAAQ,QAASJ,KAAKK,UAAU5B,IAC7CyB,aAAaE,QAAQ,SAAUJ,KAAKK,UAAUR,MAC7C,CAACpB,EAAOoB,IAqBX,OAAO,cAAC,EAAD,CAAKpB,MAAOA,EAAOb,SAAUA,EAAUG,QAnBzB,SAACwB,GACpB3B,GAAS,SAAC0C,GAcR,OAbsBA,EAAKhB,KAAI,SAACiB,EAAGzB,GAUjC,OATIA,IAAMS,IAENgB,EADEV,EACE,IAEA,IAENC,GAAU,SAACQ,GAAD,OAAmBA,MAGxBC,YCvCfC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.5d14a49b.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { IBoard } from \"../utils/interfaces\";\nimport { calculateWinner } from \"../utils/winner\";\n\ntype AppProps = {\n  onClick: (index: number) => void;\n  board: IBoard[];\n  setBoard: (value: React.SetStateAction<IBoard[]>) => void;\n};\n\nconst WinnerWindow: React.FC<{\n  winner: IBoard;\n  setWinner: (value: React.SetStateAction<IBoard | null>) => void;\n  setBoard: (value: React.SetStateAction<IBoard[]>) => void;\n}> = ({ winner, setWinner, setBoard }) => {\n  const gameAgain = () => {\n    setWinner(null);\n    setBoard([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"]);\n  };\n\n  return (\n    <Modal>\n      <ModalInner>\n        <h1>Winner {winner}</h1>\n        <button onClick={() => gameAgain()}>Game Again</button>\n      </ModalInner>\n    </Modal>\n  );\n};\n\nconst App: React.FC<AppProps> = ({ onClick, board, setBoard }) => {\n  const [winner, setWinner] = useState<IBoard | null>(null);\n\n  useEffect(() => {\n    setWinner(calculateWinner(board));\n  }, [board]);\n\n  const checkImg = (value: IBoard) => {\n    switch (value) {\n      case \"x\":\n        return \"cross\";\n      case \"o\":\n        return \"zero\";\n      default:\n        return \"bg\";\n    }\n  };\n\n  return (\n    <GameContainer>\n      {winner && (\n        <WinnerWindow\n          winner={winner}\n          setBoard={setBoard}\n          setWinner={setWinner}\n        />\n      )}\n\n      <Game>\n        {board.map((value, index) => (\n          <Square\n            onClick={onClick.bind(null, index)}\n            key={index}\n            className={checkImg(value)}\n          >\n            <Image src={`/${checkImg(value)}.png`} alt=\"\" />\n          </Square>\n        ))}\n      </Game>\n    </GameContainer>\n  );\n};\n\nconst Image = styled.img`\n  width: 100px;\n  height: 100px;\n`;\n\nconst Game = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n\n  width: 500px;\n  height: 500px;\n`;\n\nconst GameContainer = styled.div`\n  display: grid;\n  place-items: center;\n  height: 100vh;\n`;\n\nconst Square = styled.button`\n  background-color: #78bec5;\n  border: none;\n  margin: 5px;\n  border-radius: 20px;\n`;\n\nconst Modal = styled.div`\n  height: 100%;\n  width: 100%;\n\n  background: rgba(65, 65, 65, 0.5);\n\n  position: absolute;\n  display: grid;\n  place-items: center;\n`;\n\nconst ModalInner = styled.div`\n  position: absolute;\n  background-color: #fff;\n\n  text-align: center;\n  padding: 20px 80px;\n  border-radius: 2px;\n\n  > h1 {\n    text-transform: capitalize;\n  }\n  > button {\n    border: none;\n    border-radius: 5px;\n    padding: 10px 20px;\n    font-weight: 600;\n    background-color: black;\n    color: white;\n  }\n`;\n\nexport default App;\n","import {IBoard} from \"./interfaces\"\r\n\r\nexport function calculateWinner(squares: IBoard[]) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { IBoard } from \"../utils/interfaces\";\r\nimport App from \"./App\";\r\n\r\nconst AppContainer: React.FC = () => {\r\n  const [board, setBoard] = useState<IBoard[]>([\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n    \"\",\r\n  ]);\r\n  const [player, setPlayer] = useState<boolean | null>(true);\r\n\r\n  useEffect(() => {\r\n    const saved = JSON.parse(localStorage.getItem(\"board\") || \"[]\") as IBoard[];\r\n    const player = !!localStorage.getItem(\"player\");\r\n\r\n    setBoard(saved);\r\n    setPlayer(player);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"board\", JSON.stringify(board));\r\n    localStorage.setItem(\"player\", JSON.stringify(player));\r\n  }, [board, player]);\r\n\r\n  const clickHandler = (index: number) => {\r\n    setBoard((prev) => {\r\n      const newStateBoard = prev.map((e, i) => {\r\n        if (i === index) {\r\n          if (player) {\r\n            e = \"x\";\r\n          } else {\r\n            e = \"o\";\r\n          }\r\n          setPlayer((prev) => (prev = !prev));\r\n        }\r\n\r\n        return e;\r\n      });\r\n\r\n      return newStateBoard;\r\n    });\r\n  };\r\n\r\n  return <App board={board} setBoard={setBoard} onClick={clickHandler} />;\r\n};\r\n\r\nexport default AppContainer;\r\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/AppContainer\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}